<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Dictionary Chatbot</title>
<style>
    body {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background: url('pbackgrund.jpg') no-repeat center center/cover;
        font-family: Arial, sans-serif;
    }
    .chat-container {
        width: 500px;
        background: white;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        position: relative;
    }
    .chat-header {
        background: rgba(2, 82, 82, 0.915);
        color: white;
        padding: 10px;
        font-size: 18px;
        text-align: center;
        font-weight: bold;
        position: relative;
    }
    .chat-header img {
        position: absolute;
        top: 5px;
        width: 30px;
        height: 30px;
        border-radius: 50%;
    }
    .logo {
        left: 10px;
    }
    .profile {
        right: 10px;
    }
    .chat-box {
        height: 500px;
        overflow-y: auto;
        padding: 10px;
    }
    .message {
        display: flex;
        align-items: center;
        margin: 5px 0;
    }
    .message.sent {
        justify-content: flex-end;
    }
    .message-received {
        justify-content: flex-start;
    }
    .message .text {
    padding: 10px;
    border-radius: 15px;
    max-width: fit-content;
    max-height: fit-content;
    word-wrap: break-word; /* Ensures long words break properly */
    overflow-wrap: break-word; /* Alternative for better compatibility */
    white-space: pre-wrap; /* Maintains formatting while preventing overflow */
}


    .message.sent .text {
        background: rgba(2, 82, 82, 0.915);
        color: white;
        margin-left: 50px;
    }
    .message .text {
        background: rgb(220, 221, 222);
        padding: 10px;
        border-radius: 15px;
        max-width: fit-content;
        max-height: fit-content;
        word-wrap: break-word; /* Ensures long words break properly */
        overflow-wrap: break-word; /* Alternative for better compatibility */
        white-space: pre-wrap;
        align-items: center;
    }
    .message img {
        width: 30px;
        height: 30px;
        border-radius: 50%;
    }
    .message.sent img {
        width: 25px;
        height: 25px;
    }
    .chat-input {
        display: flex;
        padding: 10px;
        border-top: 1px solid #ccc;
    }
    .chat-input input {
        flex: 1;
        padding: 8px;
        border: none;
        outline: none;
    }
    .chat-input button {
        background: rgba(2, 82, 82, 0.915);
        color: white;
        border: none;
        padding: 8px 12px;
        cursor: pointer;
    }
    .speak-button {
        background: transparent;
        border: none;
        cursor: pointer;
        margin-left: 5px;
        font-size: 16px;
    }
    .dictionary-info {
        padding: 10px;
        border-bottom: 1px solid #ccc;
    }
    .dictionary-info .header {
        font-weight: bold;
        font-size: 18px;
        margin-bottom: 10px;
    }
    .dictionary-info .definition {
        margin-bottom: 20px;
    }
    .dictionary-info .pronunciation {
        font-style: italic;
        margin-bottom: 20px;
    }
    .dictionary-info .example {
        font-style: italic;
        margin-bottom: 20px;
    }
    .dictionary-info .synonyms {
        margin-bottom: 20px;
    }
    

    /* Styling for the "Copied" text */
    .copied-text {
        font-size: 12px;
        color: green;
        margin-left: 5px;
    }
</style>
</head>
<body>
<div class="chat-container">
    <div class="chat-header">
       <img src="LEXIBOT.png" alt="Logo" class="logo" >
        Dictionary Chatbot
        <a href="/userprofile"><img src="user.png" alt="Profile" class="profile"></a>
    </div>
    <div class="chat-box" id="chatBox">
        <div class="message-received">
            <img src="LEXIBOT.png" alt="Logo" style="width: 30px; height: 30px; border-radius: 50%;">
            <div class="text">Hello! Type a word to get its definition, pronunciation, and more.</div>
        </div>
    </div>
    <div class="chat-input">
        <input type="text" id="messageInput" placeholder="Type a word" onkeydown="checkEnter(event)">
        <button onclick="sendMessage()">âžœ</button>
    </div>
</div>
<script>
async function sendMessage() {
    const input = document.getElementById("messageInput");
    const message = input.value.trim();
    if (message === "") return;

    const chatBox = document.getElementById("chatBox");

    // Display user's message
    const sentMessage = document.createElement("div");
    sentMessage.classList.add("message", "sent");
    sentMessage.innerHTML = `<div class="text">${message}</div><img src="user.png" alt="Profile">`;
    chatBox.appendChild(sentMessage);
    input.value = "";
    chatBox.scrollTop = chatBox.scrollHeight;

    try {
        const response = await fetch('/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ query: message })
        });

        const data = await response.json();
        if (!data || data.error) {
            throw new Error(data.error || "Unknown error occurred");
        }

        // âœ… Handle dictionary response
        if (data.word) {
            displayWordInfo(data.word, data);
        } 
        // âœ… Handle chatbot response
        // âœ… Handle chatbot response
     // âœ… Handle chatbot response
        else if (data.response) {
            // If data.response is a plain string (as in greetings or bot-info), display it using the simple function.
            if (typeof data.response === "string") {
                displaySimpleResponse(data.response);
            } else {
                // Otherwise, assume it's a Gemini object and extract the text as before.
                displayChatbotResponse(
                    data.response.candidates?.[0]?.content?.parts?.[0]?.text || "No response text found"
                );
            }
        }

        // âœ… Handle follow-up details
        else if (data.details) {
            displayFollowUpResponse(data.details);
        }
    } catch (error) {
        console.error('Error processing request:', error);
        displayError(error.message);
    }
}

/**
 * Displays dictionary information
 */
 function displayWordInfo(word, info) {
    const chatBox = document.getElementById("chatBox");
    const receivedMessage = document.createElement("div");
    receivedMessage.classList.add("message", "received");

    const dictionaryInfo = document.createElement("div");
    dictionaryInfo.classList.add("dictionary-info");

    const header = document.createElement("h2");
    header.classList.add("header");
    header.textContent = word;
    dictionaryInfo.appendChild(header);

    // Loop through API Sources
    if (info.sources) {
        for (const [api, data] of Object.entries(info.sources)) {
            const apiHeading = document.createElement("h3");
            apiHeading.classList.add("api-heading");
            apiHeading.textContent = `${api}:`;
            dictionaryInfo.appendChild(apiHeading);

            // Display Definitions
            if (data.definitions && data.definitions.length > 0) {
                data.definitions.forEach((def, index) => {
                    const definition = document.createElement("p");
                    definition.classList.add("definition");
                    definition.innerHTML = `<strong>Definition ${index + 1} (${def.partOfSpeech || "N/A"}):</strong> ${def.definition}`;
                    dictionaryInfo.appendChild(definition);
                });
            } else {
                dictionaryInfo.innerHTML += `<p><strong>Definitions (${api}):</strong> No definitions found.</p>`;
            }

            // Display Synonyms
            if (data.synonyms && data.synonyms.length > 0) {
                dictionaryInfo.innerHTML += `<p><strong>Synonyms (${api}):</strong> ${data.synonyms.map(s => s.word || s).join(", ")}</p>`;
            } else {
                dictionaryInfo.innerHTML += `<p><strong>Synonyms (${api}):</strong> No synonyms available.</p>`;
            }

            // Display Examples
            if (data.examples && data.examples.length > 0) {
                dictionaryInfo.innerHTML += `<p><strong>Example (${api}):</strong> ${data.examples[0]}</p>`;
            } else {
                dictionaryInfo.innerHTML += `<p><strong>Example (${api}):</strong> No examples found.</p>`;
            }
        }
    }

    receivedMessage.innerHTML = `<img src="LEXIBOT.png" alt="Logo">`;
    receivedMessage.appendChild(dictionaryInfo);
    chatBox.appendChild(receivedMessage);
    chatBox.scrollTop = chatBox.scrollHeight;

    // âœ… Add Speak Button
    const speakButton = createButton("ðŸ”Š", () => speakWord(word));
    dictionaryInfo.appendChild(speakButton);

    // âœ… Add Copy Button
    const copyButton = createButton("ðŸ“‹", () => copyTextToClipboard(info, copyButton));
    dictionaryInfo.appendChild(copyButton);
}

/**
 * Displays a simple chatbot response (e.g., greetings and bot info)
 */
 function displaySimpleResponse(responseText) {
    const chatBox = document.getElementById("chatBox");
    const receivedMessage = document.createElement("div");
    receivedMessage.classList.add("message", "received");

    receivedMessage.innerHTML = `</div><img src="LEXIBOT.png" alt="Logo"><div class="text">${responseText}`;
    chatBox.appendChild(receivedMessage);
    chatBox.scrollTop = chatBox.scrollHeight;
}

/**
 * Displays chatbot (Gemini AI) response
 */
 function displayChatbotResponse(response) {
    let responseText = typeof response === "string" ? response : response.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!responseText) {
        console.error("Invalid response format:", response);
        responseText = "No valid response found";
    }

    const chatBox = document.getElementById("chatBox");
    const receivedMessage = document.createElement("div");
    receivedMessage.classList.add("message", "received");

    let formattedText = responseText
    .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>") // Bold
    .replace(/\*(.*?)\*/g, "<em>$1</em>") // Italic
    .replace(/(?:\r\n|\r|\n)/g, "<br>") // Convert newlines
    .replace(/-\s(.*?)(?=\n|$)/g, "<br>â€¢ $1"); // Proper bullet points on new lines


    receivedMessage.innerHTML = `</div><img src="LEXIBOT.png" alt="Logo"><div class="text">${formattedText}`;
    chatBox.appendChild(receivedMessage);
    chatBox.scrollTop = chatBox.scrollHeight;
}



/**
 * Displays follow-up details
 */
 /**
 * Displays follow-up details (e.g., more synonyms, examples, antonyms)
 */
function displayFollowUpResponse(details) {
    const chatBox = document.getElementById("chatBox");
    const receivedMessage = document.createElement("div");
    receivedMessage.classList.add("message", "received");

    let responseHTML = `<img src="LEXIBOT.png" alt="Logo"><div class="text">`;

    // âœ… Display additional synonyms
    if (details.synonyms && details.synonyms.length > 0) {
        responseHTML += `<p><strong>More Synonyms:</strong> ${details.synonyms.join(", ")}</p>`;
    }

    // âœ… Display additional examples
    if (details.examples && details.examples.length > 0) {
        responseHTML += `<p><strong>More Examples:</strong> ${details.examples.join("<br>")}</p>`;
    }

    // âœ… Display antonyms
    if (details.antonyms && details.antonyms.length > 0) {
        responseHTML += `<p><strong>Antonyms:</strong> ${details.antonyms.join(", ")}</p>`;
    }

    // âœ… Handle empty response case
    if (!details.synonyms && !details.examples && !details.antonyms) {
        responseHTML += `<p>No additional information found.</p>`;
    }

    responseHTML += `</div>`;
    receivedMessage.innerHTML = responseHTML;
    
    chatBox.appendChild(receivedMessage);
    chatBox.scrollTop = chatBox.scrollHeight;
}



/**
 * Handles error messages
 */
function displayError(errorMessage) {
    const chatBox = document.getElementById("chatBox");
    const receivedMessage = document.createElement("div");
    receivedMessage.classList.add("message", "received");
    receivedMessage.innerHTML = `</div><img src="LEXIBOT.png" alt="Logo"><div class="text">Error: ${errorMessage}`;
    chatBox.appendChild(receivedMessage);
    chatBox.scrollTop = chatBox.scrollHeight;
}

/**
 * Speak the word
 */
function speakWord(word) {
    const utterance = new SpeechSynthesisUtterance(word);
    utterance.lang = "en-US";
    speechSynthesis.speak(utterance);
}

/**
 * Copy dictionary info to clipboard
 */
function copyTextToClipboard(info, button) {
    const textToCopy = `
        Definitions: ${info.definitions.length > 0 ? info.definitions.map(def => def.definition).join("; ") : "No definition available"}
        Example: ${info.examples.length > 0 ? info.examples[0] : "No example available"}
        Synonyms: ${info.synonyms.length > 0 ? info.synonyms.join(", ") : "No synonyms available"}
    `;
    navigator.clipboard.writeText(textToCopy).then(() => {
        const copiedText = document.createElement("span");
        copiedText.classList.add("copied-text");
        copiedText.textContent = "Copied!";
        button.appendChild(copiedText);

        setTimeout(() => {
            copiedText.remove();
        }, 1000);
    }).catch((error) => {
        console.error("Failed to copy:", error);
    });
}

/**
 * Creates a button
 */
function createButton(text, onClick) {
    const button = document.createElement("button");
    button.classList.add("speak-button");
    button.textContent = text;
    button.onclick = onClick;
    return button;
}

/**
 * Detect Enter Key Press
 */
function checkEnter(event) {
    if (event.key === "Enter") {
        event.preventDefault();
        sendMessage();
    }
}
</script>



</body>
</html>





